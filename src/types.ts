import BigNumber from "bignumber.js";
import {Order} from "./orders/types";
import {AxiosRequestConfig} from "axios";

export enum Network {
    Main = 'main',
    Rinkeby = 'rinkeby',
}

export enum SchemaName {
    ERC20 = "ERC20",
    ERC721 = "ERC721",
    ERC721v3 = "ERC721v3",
    ERC1155 = "ERC1155",
    LegacyEnjin = "Enjin",
    ENSShortNameAuction = "ENSShortNameAuction",
    // CryptoPunks = 'CryptoPunks'
}

export interface Asset {
    // The asset's token ID, or null if ERC-20
    tokenId: string | null;
    // The asset's contract address
    tokenAddress: string;
    // The Wyvern schema name (e.g. "ERC721") for this asset
    schemaName?: SchemaName;
    // The token standard version of this asset
    version?: TokenStandardVersion;
    // Optional for ENS names
    name?: string;
    // Optional for fungible items
    decimals?: number;
}

export enum TokenStandardVersion {
    Unsupported = "unsupported",
    Locked = "locked",
    Enjin = "1155-1.0",
    ERC721v1 = "1.0",
    ERC721v2 = "2.0",
    ERC721v3 = "3.0",
}

export interface OpenSeaAPIConfig {
    networkName?: Network;
    apiKey?: string;
    apiBaseUrl?: string;
    axiosConfig?: AxiosRequestConfig;
}

/**
 * The OpenSea account object appended to orders, providing extra metadata, profile images and usernames
 */
export class OpenSeaAccount {
    // Wallet address for this account
    address: string;
    // Public configuration info, including "affiliate" for users who are in the OpenSea affiliate program
    config: string;

    // This account's profile image - by default, randomly generated by the server
    profile_img_url: string;

    // More information explicitly set by this account's owner on OpenSea
    user: OpenSeaUser | number | null;
}

export interface OpenSeaUser {
    // Username for this user
    username?: string;
}

interface OpenSeaFees {
    // Fee for OpenSea levied on sellers
    openseaSellerFeeBasisPoints: number;
    // Fee for OpenSea levied on buyers
    openseaBuyerFeeBasisPoints: number;
    // Fee for the collection owner levied on sellers
    devSellerFeeBasisPoints: number;
    // Fee for the collection owner levied on buyers
    devBuyerFeeBasisPoints: number;
}

export enum AssetContractType {
    Fungible = "fungible",
    SemiFungible = "semi-fungible",
    NonFungible = "non-fungible",
    Unknown = "unknown",
}

export interface OpenSeaAssetContract extends OpenSeaFees {
    // Name of the asset's contract
    name: string;
    // Address of this contract
    address: string;
    // Type of token (fungible/NFT)
    type: AssetContractType;
    // Wyvern Schema Name for this contract
    schemaName: SchemaName;

    // Total fee levied on sellers by this contract, in basis points
    sellerFeeBasisPoints: number;
    // Total fee levied on buyers by this contract, in basis points
    buyerFeeBasisPoints: number;

    // Description of the contract
    description: string;
    // Contract's Etherscan / OpenSea symbol
    tokenSymbol: string;
    // Image for the contract
    imageUrl: string;
    // Object with stats about the contract
    stats?: object;
    // Array of trait types for the contract
    traits?: object[];
    // Link to the contract's main website
    externalLink?: string;
    // Link to the contract's wiki, if available
    wikiLink?: string;
}

export interface Token {
    name: string;
    symbol: string;
    decimals: number;
    address: string;
}

export interface OpenSeaFungibleToken extends Token {
    imageUrl?: string;
    ethPrice?: string;
    usdPrice?: string;
}

/**
 * Annotated collection with OpenSea metadata
 */
export interface OpenSeaCollection extends OpenSeaFees {
    // Name of the collection
    name: string;
    // Slug, used in URL
    slug: string;
    // Accounts allowed to edit this collection
    editors: string[];
    // Whether this collection is hidden from the homepage
    hidden: boolean;
    // Whether this collection is featured
    featured: boolean;
    // Date collection was created
    createdDate: Date;

    // Description of the collection
    description: string;
    // Image for the collection
    imageUrl: string;
    // Image for the collection, large
    largeImageUrl: string;
    // Image for the collection when featured
    featuredImageUrl: string;
    // Object with stats about the collection
    stats: object;
    // Data about displaying cards
    displayData: object;
    // Tokens allowed for this collection
    paymentTokens: OpenSeaFungibleToken[];
    // Address for dev fee payouts
    payoutAddress?: string;
    // Array of trait types for the collection
    traitStats: OpenSeaTraitStats;
    // Link to the collection's main website
    externalLink?: string;
    // Link to the collection's wiki, if available
    wikiLink?: string;
}

export interface OpenSeaTraitStats {
    [traitName: string]: NumericalTraitStats | StringTraitStats;
}

interface NumericalTraitStats {
    min: number;
    max: number;
}

interface StringTraitStats {
    [key: string]: number;
}

/**
 * Annotated asset spec with OpenSea metadata
 */
export interface OpenSeaAsset extends Asset {
    assetContract: OpenSeaAssetContract;
    collection: OpenSeaCollection;
    // The asset's given name
    name: string;
    // Description of the asset
    description: string;
    // Owner of the asset
    owner: OpenSeaAccount;
    // Orders on the asset. Null if asset was fetched in a list
    orders: Order[] | null;
    // Buy orders (offers) on the asset. Null if asset in a list and didn't prefetch buy orders
    buyOrders: Order[] | null;
    // Sell orders (auctions) on the asset. Null if asset in a list and didn't prefetch sell orders
    sellOrders: Order[] | null;

    // Whether the asset is on a pre-sale (so token ids aren't real)
    isPresale: boolean;
    // The cached and size-optimized image url for this token
    imageUrl: string;
    // The image preview url for this token.
    // Note: Loses gif animation and may have issues with SVGs
    imagePreviewUrl: string;
    // The original image url for this token
    imageUrlOriginal: string;
    // Thumbnail url for this token
    imageUrlThumbnail: string;
    // Link to token on OpenSea
    openseaLink: string;
    // Link to token on dapp's site
    externalLink: string;
    // Array of traits on this token
    traits: object[];
    // Number of times this token has been traded (sold)
    numSales: number;
    // Data about the last time this token was sold
    lastSale: AssetEvent | null;
    // The suggested background color for the image url
    backgroundColor: string | null;
    // The per-transfer fee, in base units, for this asset in its transfer method
    transferFee: BigNumber | string | null;
    // The transfer fee token for this asset in its transfer method
    transferFeePaymentToken: OpenSeaFungibleToken | null;
}

export interface OpenSeaAssetBundle {
    maker: OpenSeaAccount;
    assets: OpenSeaAsset[];
    name: string;
    slug: string;
    permalink: string;

    // Sell orders (auctions) on the bundle. Null if bundle in a list and didn't prefetch sell orders
    sellOrders: Order[] | null;

    assetContract?: OpenSeaAssetContract;
    description?: string;
    externalLink?: string;
}

enum AssetEventType {
    AuctionCreated = "created",
    AuctionSuccessful = "successful",
    AuctionCancelled = "cancelled",
    OfferEntered = "offer_entered",
    BidEntered = "bid_entered",
    BidWithdraw = "bid_withdraw",
    AssetTransfer = "transfer",
    AssetApprove = "approve",
    CompositionCreated = "composition_created",
    Custom = "custom",
    Payout = "payout",
}

enum AuctionType {
    Dutch = "dutch",
    English = "english",
    MinPrice = "min_price",
}

export interface AssetEvent {
    // The type of event
    eventType: AssetEventType;

    // The timestamp of the transaction (if on-chain) or when the off-chain occurred
    eventTimestamp: Date;

    // The auction type
    auctionType: AuctionType;

    // The total price of the sale in the payment
    totalPrice: string;

    // The transaction associated with the token sale
    transaction: Transaction | null;

    // Details about the token used in the payment for this asset
    paymentToken: OpenSeaFungibleToken | null;
}

/**
 * Defines a Transaction type.
 */
export interface Transaction {
    // The details about the account that sent the transaction
    fromAccount: OpenSeaAccount;

    // The details about the account that received the transaction
    toAccount: OpenSeaAccount;

    // Date when the transaction was created
    createdDate: Date;

    // Date when the transaction was modified
    modifiedDate: Date;

    // The transaction hash
    transactionHash: string;

    // The index of the transaction within the block
    transactionIndex: string;

    // The number of the block in which this transaction resides
    blockNumber: string;

    // The hash of the block in which this transaction resides
    blockHash: string;

    // The timestamp of the transaction
    timestamp: Date;
}
